// This is a collection of colour conversion utilities
// since the CI kernel language doesn't have an 'include' feature, it's probably necessary to cur & paste these into individual kernels,
// but at least they are all in one place here


vec4 rgb2hsl(vec4 inputColor)
{
  vec4 color = clamp(inputColor,vec4(0.0),vec4(1.0));

  //Compute min and max component values
  float MAX = max(color.r, max(color.g, color.b));
  float MIN = min(color.r, min(color.g, color.b));

  //Make sure MAX > MIN to avoid division by zero later
  MAX = max(MIN + 1e-6, MAX);

  //Compute luminosity
  float l = (MIN + MAX) / 2.0;

  //Compute saturation
  float s = (l < 0.5 ? (MAX - MIN) / (MIN + MAX) : (MAX - MIN) / (2.0 - MAX - MIN));

  //Compute hue
  float h = (MAX == color.r ? (color.g - color.b) / (MAX - MIN) : (MAX == color.g ? 2.0 + (color.b - color.r) / (MAX - MIN) : 4.0 + (color.r - color.g) / (MAX - MIN)));
  h /= 6.0;
  h = (h < 0.0 ? 1.0 + h : h);

  return vec4(h, s, l, color.a);
}


float hue2rgb(float p, float q, float t){
  if(t < 0.0) t += 1.0;
  if(t > 1.0) t -= 1.0;
  if(t < 1.0/6.0) return p + (q - p) * 6.0 * t;
  if(t < 1.0/2.0) return q;
  if(t < 2.0/3.0) return p + (q - p) * (2.0/3.0 - t) * 6.0;
  return p;
}


vec4 hsl2rgb(vec4 inputColor)
{
  vec4 color = clamp(inputColor,vec4(0.0),vec4(1.0));

  float h = color.r;
  float s = color.g;
  float l = color.b;

  float r,g,b;
  if(s <= 0.0){
    r = g = b = l;
  }else{
    float q = l < 0.5 ? (l * (1.0 + s)) : (l + s - l * s);
    float p = 2.0 * l - q;
    r = hue2rgb(p, q, h + 1.0/3.0);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1.0/3.0);
  }
  return vec4(r,g,b,color.a);
}

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
